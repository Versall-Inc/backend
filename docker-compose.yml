services:
  # -------------------------------------------------------------------
  #                         CENTRAL POSTGRES
  # -------------------------------------------------------------------
  central-postgres:
    image: postgres:15
    container_name: central_postgres_container
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
      - central_postgres_data:/var/lib/postgresql/data
    networks:
      - intelligence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # -------------------------------------------------------------------
  #                           API GATEWAY
  # -------------------------------------------------------------------
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "3000:3000"
    networks:
      - intelligence-network
    depends_on:
      central-postgres:
        condition: service_healthy
    environment:
      - DB_HOST=central-postgres
      - DB_PORT=5432
      - DB_NAME=user_data_db
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - CHOKIDAR_USEPOLLING=true
      - JWT_SECRET=mysecret
      - PORT=3000
    volumes:
      - ./api-gateway:/server
      - node_modules1:/server/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # -------------------------------------------------------------------
  #                      USER MANAGEMENT SERVICE
  # -------------------------------------------------------------------
  user-management-service:
    build:
      context: ./user-management
    ports:
      - "4000:4000"
    networks:
      - intelligence-network
    depends_on:
      central-postgres:
        condition: service_healthy
    environment:
      - DB_HOST=central-postgres
      - DB_PORT=5432
      - DB_NAME=user_data_db
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - CHOKIDAR_USEPOLLING=true
      - PORT=4000
      - JWT_SECRET=mysecret
    volumes:
      - ./user-management:/server
      - node_modules2:/server/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # -------------------------------------------------------------------
  #                       COMMUNITY SERVICE
  # -------------------------------------------------------------------
  community-service:
    build:
      context: ./community-service
    ports:
      - "4001:4001"
    networks:
      - intelligence-network
    depends_on:
      central-postgres:
        condition: service_healthy
    environment:
      - DB_HOST=central-postgres
      - DB_PORT=5432
      - DB_NAME=community_db
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - CHOKIDAR_USEPOLLING=true
      - PORT=4001
    volumes:
      - ./community-service:/server
      - node_modules3:/server/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # -------------------------------------------------------------------
  #                              MONGO
  # -------------------------------------------------------------------
  mongo:
    image: mongo:6
    container_name: mongo_container
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - intelligence-network
    restart: always

  # -------------------------------------------------------------------
  #                   COURSE MANAGEMENT SERVICE
  # -------------------------------------------------------------------
  course-management:
    build:
      context: ./course-management
    container_name: course_management_container
    ports:
      - "4003:4003"
    networks:
      - intelligence-network
    depends_on:
      mongo:
        condition: service_started
    environment:
      - MONGO_URI=mongodb://mongo:27017/course_management_db
      - CHOKIDAR_USEPOLLING=true
      - PORT=4003
    volumes:
      - ./course-management:/server
      - node_modules4:/server/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # -------------------------------------------------------------------
  #                   COURSE GENERATION API
  # -------------------------------------------------------------------
  course-generation:
    build:
      context: ./course-generation
    container_name: course_generation
    ports:
      - "4004:4004"
    networks:
      - intelligence-network
    depends_on:
      central-postgres:
        condition: service_healthy
    environment:
      - PORT=4004
      - OPENAI_API_KEY=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
      - GOOGLE_API_KEY=AIzaSyARHb_1bhST7sqK0WkYZ7Orx3GB-hnAYAI
      - UNSPLASH_ACCESS_KEY=rg_K-pdZq5TLF2cuTNGBGHg86M1dHywF2Nq05j1OOTM
      - GPT_MODEL=gpt-4o
      - TEMPERATURE=1
      - QUIZ_DURATION=30 # mins
      - ASSIGNMENT_DURATION=120 # mins
      - QUIZ_QUESTIONS=5
      - ASSIGNMENT_QUESTIONS=3
      - MAX_VIDEO_RESULTS=5
      - VIDEO_DURATION=medium
    volumes:
      - ./course-generation:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # -------------------------------------------------------------------
  #                      SCHEDULE MANAGEMENT SERVICE
  # -------------------------------------------------------------------
  schedule-management-service:
    build:
      context: ./schedule-management
    ports:
      - "4002:4002"
    networks:
      - intelligence-network
    environment:
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=schedule_db
      - CHOKIDAR_USEPOLLING=true
      - PORT=4002
    volumes:
      - ./schedule-management:/server
      - node_modules5:/server/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # -------------------------------------------------------------------
  #                           MONGODB
  # -------------------------------------------------------------------
  mongodb:
    image: mongo:6
    container_name: mongodb_container
    ports:
      - "27016:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - intelligence-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_URI: mongodb://root:rootpassword@mongodb:27017/admin
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo 'db.runCommand({ping: 1})' | mongo --quiet --username root --password rootpassword --authenticationDatabase admin",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

networks:
  intelligence-network:
    driver: bridge

volumes:
  central_postgres_data:
  node_modules1:
  node_modules2:
  node_modules3:
  node_modules4:
  node_modules5:
  mongo_data:
  mongodb_data:
